import config from 'config';
import path from 'path';
import { emptyDir, remove } from 'fs-extra';
import sharp from 'sharp';
import { exiftool } from 'exiftool-vendored';

const { store, resolutions } = config.get('media');
const mediaPath = path.join(__dirname, '..', '..', store.path);

export async function clearMediaStore () {
  await emptyDir(mediaPath);
}

export async function persistImageBase64 (name, data, meta) {
  const baseFilePath = path.join(mediaPath, name);
  const originalFilePath = `${baseFilePath}.jpg`;
  const { lon, lat, bearing, createdAt } = meta;

  try {
    // Get buffer from input data
    const inputBuffer = Buffer.from(data, 'base64');

    // Write original file for manipulation
    await sharp(inputBuffer)
      .withMetadata()
      .toFile(originalFilePath);

    // Update location related EXIF tags
    await exiftool.write(originalFilePath, {
      AllDates: createdAt.toISOString(),
      GPSLatitudeRef: lat >= 0 ? 'N' : 'S',
      GPSLatitude: Math.abs(lat),
      GPSLongitudeRef: lon >= 0 ? 'E' : 'W',
      GPSLongitude: Math.abs(lon),
      GPSDestBearingRef: 'T',
      GPSDestBearing: bearing
    });

    // Write resized files
    for (let i = 0; i < resolutions.length; i++) {
      const { width, height, suffix } = resolutions[i];
      const resizedFilePath = `${baseFilePath}${suffix}.jpg`;
      await sharp(originalFilePath)
        .withMetadata()
        .resize(width, height, { fit: 'inside' })
        .toFile(resizedFilePath);
    }
  } finally {
    // Remove file generated by "exiftool-vendored" module
    await remove(`${originalFilePath}_original`);

    // Remove original file
    await remove(originalFilePath);
  }
}
